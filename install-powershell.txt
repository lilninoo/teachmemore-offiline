# install.ps1 - Script d'installation Windows pour LearnPress Offline

# V√©rifier les droits administrateur
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Ce script doit √™tre ex√©cut√© en tant qu'administrateur." -ForegroundColor Red
    Write-Host "Clic droit sur PowerShell ‚Üí Ex√©cuter en tant qu'administrateur" -ForegroundColor Yellow
    pause
    exit
}

# Configuration des couleurs
$host.UI.RawUI.BackgroundColor = "Black"
Clear-Host

# Logo ASCII
Write-Host @"
 _                           ____                         
| |    ___  __ _ _ __ _ __ |  _ \ _ __ ___  ___ ___     
| |   / _ \/ _`` | '__| '_ \| |_) | '__/ _ \/ __/ __|    
| |__|  __/ (_| | |  | | | |  __/| | |  __/\__ \__ \    
|_____\___|\__,_|_|  |_| |_|_|   |_|  \___||___/___/    
                                                         
          ___   __  __ _ _              
         / _ \ / _|/ _| (_)_ __   ___   
        | | | | |_| |_| | | '_ \ / _ \  
        | |_| |  _|  _| | | | | |  __/  
         \___/|_| |_| |_|_|_| |_|\___|  
                                        
"@ -ForegroundColor Cyan

Write-Host "`n=== Installation de LearnPress Offline pour Windows ===" -ForegroundColor Green
Write-Host ""

# Fonction pour v√©rifier les pr√©requis
function Check-Prerequisites {
    Write-Host "üìã V√©rification des pr√©requis..." -ForegroundColor Blue
    
    $prerequisites = @{
        "Node.js" = "node"
        "npm" = "npm"
        "Git" = "git"
    }
    
    $allGood = $true
    
    foreach ($tool in $prerequisites.Keys) {
        $command = $prerequisites[$tool]
        try {
            $version = & $command --version 2>$null
            if ($version) {
                Write-Host "‚úÖ $tool install√© : $version" -ForegroundColor Green
            }
        }
        catch {
            if ($tool -eq "Git") {
                Write-Host "‚ö†Ô∏è  $tool n'est pas install√© (optionnel)" -ForegroundColor Yellow
            }
            else {
                Write-Host "‚ùå $tool n'est pas install√©" -ForegroundColor Red
                Write-Host "   T√©l√©chargez depuis : " -NoNewline
                
                if ($tool -eq "Node.js") {
                    Write-Host "https://nodejs.org" -ForegroundColor Yellow
                }
                
                $allGood = $false
            }
        }
    }
    
    Write-Host ""
    return $allGood
}

# Fonction pour cr√©er la structure du projet
function Create-ProjectStructure {
    Write-Host "üìÅ Cr√©ation de la structure du projet..." -ForegroundColor Blue
    
    $directories = @(
        "src\js",
        "src\css",
        "lib",
        "assets\icons",
        "assets\images",
        "database",
        "build",
        "scripts",
        "tests",
        "wordpress-plugin",
        ".github\workflows"
    )
    
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-Host "‚úÖ Cr√©√© : $dir" -ForegroundColor Green
        }
        else {
            Write-Host "‚úÖ Existe d√©j√† : $dir" -ForegroundColor DarkGreen
        }
    }
    
    Write-Host ""
}

# Fonction pour installer les d√©pendances
function Install-Dependencies {
    Write-Host "üì¶ Installation des d√©pendances npm..." -ForegroundColor Blue
    
    if (Test-Path "package.json") {
        Write-Host "Installation en cours... (cela peut prendre quelques minutes)" -ForegroundColor Yellow
        
        # Nettoyer le cache npm si n√©cessaire
        npm cache clean --force 2>$null
        
        # Installer les d√©pendances
        npm install
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
            Write-Host "Essayez : npm install --force" -ForegroundColor Yellow
        }
    }
    else {
        Write-Host "‚ùå package.json non trouv√©" -ForegroundColor Red
        Write-Host "Assurez-vous d'avoir copi√© tous les fichiers du projet" -ForegroundColor Yellow
    }
    
    Write-Host ""
}

# Fonction pour configurer l'environnement
function Setup-Environment {
    Write-Host "‚öôÔ∏è  Configuration de l'environnement..." -ForegroundColor Blue
    
    # V√©rifier ou cr√©er le fichier .env
    if (!(Test-Path ".env")) {
        Write-Host "G√©n√©ration de la cl√© de chiffrement..." -ForegroundColor Yellow
        npm run generate-key
        Write-Host "‚úÖ Cl√© de chiffrement g√©n√©r√©e" -ForegroundColor Green
    }
    else {
        Write-Host "‚úÖ Fichier .env d√©j√† pr√©sent" -ForegroundColor DarkGreen
    }
    
    # V√©rifier l'ic√¥ne
    if (!(Test-Path "assets\icons\icon.png")) {
        Write-Host "‚ö†Ô∏è  N'oubliez pas de cr√©er une ic√¥ne 1024x1024 dans assets\icons\icon.png" -ForegroundColor Yellow
    }
    
    Write-Host ""
}

# Fonction pour configurer Windows Defender
function Configure-WindowsDefender {
    Write-Host "üõ°Ô∏è Configuration de Windows Defender..." -ForegroundColor Blue
    
    $currentPath = Get-Location
    
    try {
        # Ajouter le dossier aux exclusions
        Add-MpPreference -ExclusionPath $currentPath -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Dossier ajout√© aux exclusions Windows Defender" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ö†Ô∏è  Impossible d'ajouter aux exclusions Windows Defender" -ForegroundColor Yellow
        Write-Host "   Vous pouvez le faire manuellement dans les param√®tres Windows" -ForegroundColor Gray
    }
    
    Write-Host ""
}

# Fonction pour cr√©er des raccourcis
function Create-Shortcuts {
    Write-Host "üîó Cr√©ation des raccourcis..." -ForegroundColor Blue
    
    $WshShell = New-Object -comObject WScript.Shell
    
    # Raccourci sur le bureau pour le d√©veloppement
    $desktopPath = [Environment]::GetFolderPath("Desktop")
    $shortcut = $WshShell.CreateShortcut("$desktopPath\LearnPress Offline Dev.lnk")
    $shortcut.TargetPath = "powershell.exe"
    $shortcut.Arguments = "-NoExit -Command `"cd '$pwd'; npm start`""
    $shortcut.WorkingDirectory = $pwd
    $shortcut.IconLocation = "$pwd\assets\icons\icon.ico"
    $shortcut.Save()
    
    Write-Host "‚úÖ Raccourci cr√©√© sur le bureau" -ForegroundColor Green
    Write-Host ""
}

# Fonction pour afficher les prochaines √©tapes
function Show-NextSteps {
    Write-Host "üéâ Installation termin√©e !" -ForegroundColor Green -BackgroundColor DarkGreen
    Write-Host ""
    
    Write-Host "üìù Prochaines √©tapes :" -ForegroundColor Blue
    Write-Host "1. Installer le plugin WordPress sur votre site" -ForegroundColor White
    Write-Host "2. Cr√©er une ic√¥ne 1024x1024 si ce n'est pas fait" -ForegroundColor White
    Write-Host "3. Tester l'application : " -NoNewline
    Write-Host "npm start" -ForegroundColor Yellow
    Write-Host "4. Builder pour Windows : " -NoNewline
    Write-Host "npm run build-win" -ForegroundColor Yellow
    
    Write-Host "`nüöÄ Commandes utiles :" -ForegroundColor Blue
    Write-Host "- D√©marrer en dev : " -NoNewline
    Write-Host "npm run dev" -ForegroundColor Yellow
    Write-Host "- Lancer les tests : " -NoNewline
    Write-Host "npm test" -ForegroundColor Yellow
    Write-Host "- Nettoyer : " -NoNewline
    Write-Host "npm run clean" -ForegroundColor Yellow
    
    Write-Host "`nüìö Documentation :" -ForegroundColor Blue
    Write-Host "- Guide complet : README.md" -ForegroundColor White
    Write-Host "- Installation : INSTALLATION.md" -ForegroundColor White
    Write-Host "- Contribution : CONTRIBUTING.md" -ForegroundColor White
}

# Menu principal
function Main-Menu {
    Write-Host "Que souhaitez-vous faire ?" -ForegroundColor Blue
    Write-Host "[1] Installation compl√®te (recommand√©)" -ForegroundColor White
    Write-Host "[2] V√©rifier les pr√©requis seulement" -ForegroundColor White
    Write-Host "[3] Installer les d√©pendances seulement" -ForegroundColor White
    Write-Host "[4] Configurer l'environnement seulement" -ForegroundColor White
    Write-Host "[5] Configurer Windows Defender" -ForegroundColor White
    Write-Host "[6] Cr√©er les raccourcis" -ForegroundColor White
    Write-Host "[Q] Quitter" -ForegroundColor White
    Write-Host ""
    
    $choice = Read-Host "Votre choix"
    
    switch ($choice) {
        "1" {
            $ready = Check-Prerequisites
            if ($ready) {
                Create-ProjectStructure
                Install-Dependencies
                Setup-Environment
                Configure-WindowsDefender
                Create-Shortcuts
                Show-NextSteps
            }
        }
        "2" { Check-Prerequisites }
        "3" { Install-Dependencies }
        "4" { Setup-Environment }
        "5" { Configure-WindowsDefender }
        "6" { Create-Shortcuts }
        "Q" { 
            Write-Host "`nAu revoir !" -ForegroundColor Blue
            exit 
        }
        default {
            Write-Host "`nChoix invalide" -ForegroundColor Red
            pause
            Clear-Host
            Main-Menu
        }
    }
}

# V√©rifier si on est dans le bon dossier
if (!(Test-Path "package.json") -and $args[0] -ne "--init") {
    Write-Host "‚ö†Ô∏è  Attention : package.json non trouv√©" -ForegroundColor Yellow
    Write-Host "Assurez-vous d'√™tre dans le dossier du projet LearnPress Offline" -ForegroundColor Yellow
    Write-Host ""
    $continue = Read-Host "Continuer quand m√™me ? (O/N)"
    if ($continue -ne "O") {
        exit
    }
}

# Afficher le menu principal
Main-Menu

Write-Host "`n‚ú® Script termin√© !" -ForegroundColor Green
Write-Host "Appuyez sur une touche pour fermer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")